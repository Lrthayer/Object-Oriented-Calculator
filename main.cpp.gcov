        -:    0:Source:source/main.cpp
        -:    0:Programs:1
        -:    1:#include <iostream>
        -:    2:#include <string>
        -:    3:#include <sstream>
        -:    4:#include <string>
        -:    5:
        -:    6:#include <stdio.h>
        -:    7:#include "Expr_Node.h"
        -:    8:#include "Expr_Builder.h"
        -:    9:#include "Expr_Tree_Builder.h"
        -:   10:#include "Eval_Expr_Tree.h"
        -:   11:
        -:   12://parse, call builder
        2:   13:void parse_expr(const std::string &infix)
        -:   14:{
        4:   15:    std::istringstream input(infix);
        4:   16:    std::string token;
        4:   17:	Expr_Tree_Builder b;
        2:   18:    b.start_expression();
        -:   19:
       38:   20:    while(!input.eof())
        -:   21:    {
       18:   22:		if (input.eof())
    #####:   23:			break;
       18:   24:        input >> token;
       18:   25:        if(token == "+")
        -:   26:        {
        2:   27:            b.build_add_operand();
        -:   28:        }
       16:   29:        else if(token == "-")
        -:   30:        {
        2:   31:            b.build_subtract_operand();
        -:   32:        }
       14:   33:        else if(token == "*")
        -:   34:        {
        2:   35:            b.build_multiplication_operand();
        -:   36:        }
       12:   37:        else if(token == "/")
        -:   38:        {
    #####:   39:            b.build_division_operand();
        -:   40:        }
       12:   41:        else if(token == "%")
        -:   42:        {
    #####:   43:            b.build_modular_operand();
        -:   44:        }
       12:   45:		else if (token == "(")
        -:   46:		{
        2:   47:			b.build_open_parentheses();
        -:   48:		}
       10:   49:		else if (token == ")")
        -:   50:		{
        2:   51:			b.build_close_parenteses();
        -:   52:		}
        8:   53:        else if(token == "")
        -:   54:        {
    #####:   55:            std::cout << "space";
        -:   56:        }
        -:   57:        else
        -:   58:        {
        8:   59:            b.build_number(std::stod(token));
        -:   60:        }
        -:   61:    }
        -:   62:	//finish expression
        2:   63:	b.build_expression();
        4:   64:    Eval_Expr_Tree eval;
        2:   65:    Expr_Node *evalTree = b.get_expression();
        2:   66:    evalTree->accept(eval);
        2:   67:    std::cout << "\n" << eval.result() << "\n";
        2:   68:}
        -:   69:
        1:   70:int main()
        -:   71:{
        -:   72:	// get input from STDIN concrete factory
        1:   73:	bool running = true;
        2:   74:	std::string userInput;
        1:   75:	parse_expr("( 4 * ( 2 - 2 ) ) + 10 * 2 - 25");
        1:   76:	while(running)
        -:   77:    {
        1:   78:		bool keepGoing = true;
        3:   79:		while (keepGoing)
        -:   80:		{
        2:   81:			std::cout << "Please give an expression(form of 1 / 2 + 4)\n";
        2:   82:			std::getline(std::cin, userInput);
        -:   83:
        2:   84:			if (userInput == "QUIT" || userInput == "quit")
        -:   85:			{
        1:   86:				keepGoing = false;
        1:   87:				return 0;
        -:   88:			}
        -:   89:
        1:   90:			parse_expr(userInput);
        -:   91:		}
        -:   92:    }
    #####:   93:    return 0;
        3:   94:}
        -:   95:
